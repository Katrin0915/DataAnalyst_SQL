--Задание 1. Напишите SQL-запрос, который выводит всю информацию о фильмах со специальным атрибутом “Behind the Scenes”

select title, special_features
from film
where special_features @> array['Behind the Scenes']
order by 1;

/*Задание 2. Напишите ещё 2 варианта поиска фильмов с атрибутом “Behind the Scenes”, используя другие функции или операторы языка SQL для поиска значения в массиве*/

select title, special_features
from film
where 'Behind the Scenes'=any(special_features)
order by 1;

select title, special_features
from film
where special_features && array['Behind the Scenes']
order by 1;

select title, special_features
from film
where array_position(special_features,'Behind the Scenes') is not null
order by 1;

/*Задание 3. Для каждого покупателя посчитайте, сколько он брал в аренду фильмов со специальным атрибутом “Behind the Scenes”.
Обязательное условие для выполнения задания: используйте запрос из задания 1, помещённый в CTE*/

with cte as
	(select film_id,special_features
	from film
	where special_features @> array['Behind the Scenes']
	)
select c.customer_id,last_name||' '||first_name,count(rental_id)
from cte
	join inventory i using (film_id)
	join rental r using (inventory_id)
	right join customer c using (customer_id)--если есть покупатели,которые не брали в аренду фильмы с данным атрибутом
group by 1,2
order by 1;

/*Задание 4. Для каждого покупателя посчитайте, сколько он брал в аренду фильмов со специальным атрибутом “Behind the Scenes”.
Обязательное условие для выполнения задания: используйте запрос из задания 1, помещённый в подзапрос, который необходимо использовать для решения задания*/

select c.customer_id,last_name||' '||first_name,count(rental_id)
from film f
	join inventory i using (film_id)
	join rental r using (inventory_id)
	right join customer c using (customer_id)--если есть покупатели,которые не брали в аренду фильмы с данным атрибутом
where f.film_id in (
					select film_id
					from film
					where special_features @> array['Behind the Scenes']
					)
group by 1,2
order by 1;

/*Задание 5. Создайте материализованное представление с запросом из предыдущего задания и напишите запрос для обновления материализованного представления*/

create materialized view mod_6_5 as
	select c.customer_id,last_name||' '||first_name as customer_name,count(rental_id) as count_rental
	from film f
		join inventory i using (film_id)
		join rental r using (inventory_id)
		right join customer c using (customer_id)--если есть покупатели,которые не брали в аренду фильмы с данным атрибутом
	where f.film_id in (
						select film_id
						from film
						where special_features @> array['Behind the Scenes']
						)
	group by 1,2
	order by 1
with no data;

refresh materialized view mod_6_5;

/*Задание 6. С помощью explain analyze проведите анализ скорости выполнения запросов из предыдущих заданий и ответьте на вопросы:
· с каким оператором или функцией языка SQL, используемыми при выполнении домашнего задания, поиск значения в массиве происходит быстрее;
· какой вариант вычислений работает быстрее: с использованием CTE или с использованием подзапроса*/

explain analyze
select title, special_features
from film
where special_features @> array['Behind the Scenes']
order by 1;--92.25, 0.267 ms, 7.151 ms

explain analyze
select title, special_features
from film
where special_features && array['Behind the Scenes']
order by 1;--92.25, 0.226 ms, 7.231 ms

explain analyze
select title, special_features
from film
where 'Behind the Scenes'=any(special_features)
order by 1;--102.25, 0.204 ms, 8.556 ms

explain analyze
select title, special_features
from film
where array_position(special_features,'Behind the Scenes') is not null
order by 1;--103.42, 0.180 ms, 3.338 ms
--первые два варианта поиска требуют меньше всего ресурсов, но по скорости выполнения последний вариант лучше

explain analyze
with cte as
	(select film_id,special_features
	from film
	where special_features @> array['Behind the Scenes']
	)
select c.customer_id,last_name||' '||first_name,count(rental_id)
from cte
	join inventory i using (film_id)
	join rental r using (inventory_id)
	right join customer c using (customer_id)--если есть покупатели,которые не брали в аренду фильмы с данным атрибутом
group by 1,2
order by 1;-- 787.51; 2.031 ms, 231.163 ms

explain analyze
select c.customer_id,last_name||' '||first_name,count(rental_id)
from film f
	join inventory i using (film_id)
	join rental r using (inventory_id)
	right join customer c using (customer_id)--если есть покупатели,которые не брали в аренду фильмы с данным атрибутом
where f.film_id in (
					select film_id
					from film
					where special_features @> array['Behind the Scenes']
					)
group by 1,2
order by 1;--66,50; 2.922 ms, 270.118 ms
--вложенный запрос требует меньше всего ресурсов, но по скорости выполнения СТЕ лучше