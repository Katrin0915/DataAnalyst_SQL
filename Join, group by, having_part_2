--Задание 1. Выведите для каждого покупателя его адрес, город и страну проживания
select (first_name||' '||last_name) as "Имя и фамилия",
		a.address as Адрес,
		ct.city Город,
		cn.country Страна
from customer c
	join address a using (address_id)
	join city ct using (city_id)
	join country cn using (country_id)
order by 4,3,1;

--Задание 2. С помощью SQL-запроса посчитайте для каждого магазина количество его покупателей
select s.store_id, count(customer_id)
from store s
	join customer c using (store_id)
group by 1;

--Доработайте запрос и выведите только те магазины, у которых количество покупателей больше 300
select s.store_id, count(customer_id)
from store s
	join customer c using (store_id)
group by 1
having count(customer_id)>300;

--Доработайте запрос, добавив в него информацию о городе магазина, фамилии и имени продавца, который работает в нём
select s.store_id "ID магазина",
		c2.city Город,
		(s2.last_name||' '||s2.first_name) "Продавец",
		count(customer_id) "Количество покупателей"
from store s
	join customer c using (store_id)
	join staff s2 using (store_id)
	join address a on s.address_id=a.address_id
	join city c2 using (city_id)
group by 1,2,3
having count(customer_id)>300;

--Задание 3. Выведите топ-5 покупателей, которые взяли в аренду за всё время наибольшее количество фильмов
select (last_name||' '||first_name) customer_name, count(rental_date)
from rental r
	join customer c using (customer_id)
group by 1
order by 2 desc,1
limit 5;

/*Задание 4. Посчитайте для каждого покупателя 4 аналитических показателя:
· количество взятых в аренду фильмов;
· общую стоимость платежей за аренду всех фильмов (значение округлите до целого числа);
· минимальное значение платежа за аренду фильма;
· максимальное значение платежа за аренду фильма*/
select (last_name||' '||first_name) customer_name,
		count(rental_date) rental_count,
		round(sum(amount),0) payment_sum,
		min(amount) payment_min,
		max(amount) payment_max
from rental r
	join customer c using (customer_id)
	join payment p using (rental_id)
group by 1
order by 1;

/*Задание 5. Используя данные из таблицы городов, составьте одним запросом всевозможные пары городов так, чтобы в результате не было пар с одинаковыми названиями городов. Для решения необходимо использовать декартово произведение*/
select c.city,c2.city
from city c
	cross join city c2
where c.city!=c2.city;

/*Задание 6. Используя данные из таблицы rental о дате выдачи фильма в аренду (поле rental_date) и дате возврата (поле return_date), вычислите для каждого покупателя среднее количество дней, за которые он возвращает фильмы*/
select customer_id,round(avg(extract(epoch from return_date-rental_date)::numeric/86400),2)
from rental r
group by 1
order by 1;--есть разница в значении после запятой со следующим решением у некоторых покупателей

select customer_id,round(avg(return_date::date-rental_date::date),2)
from rental r
group by 1
order by 1;--в этом решении разница между датами вычисляется без учета часов, минут и секунд
--выбор из двух решений зависит от требуемой точности результата
